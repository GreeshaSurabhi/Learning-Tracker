<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Homework Tracker - St. Joseph’s Asharadhama ICSE School</title>
<style>
  body {
    font-family: 'Georgia', serif;
    background: #fdf6e3;
    color: #333;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    min-height: 100vh;
  }
  .container {
    width: 90%;
    max-width: 800px;
    background: #fff;
    padding: 30px 40px;
    margin: 40px 0;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  header {
    display: flex;
    align-items: center;
    margin-bottom: 25px;
  }
  header img {
    height: 60px;
    margin-right: 15px;
  }
  header h1 {
    font-size: 1.8rem;
    color: #2c3e50;
    margin: 0;
  }
  label {
    display: block;
    margin-top: 15px;
    font-weight: bold;
  }
  input[type="text"], input[type="date"], select, textarea {
    width: 100%;
    padding: 10px;
    margin-top: 6px;
    border-radius: 8px;
    border: 1px solid #ccc;
    font-family: 'Georgia', serif;
    font-size: 1rem;
    box-sizing: border-box;
  }
  textarea {
    resize: vertical;
    min-height: 80px;
    background: #fff8f0;
  }
  button {
    margin-top: 20px;
    padding: 12px 25px;
    background: #2c3e50;
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.25s ease;
  }
  button:hover {
    background: #34495e;
  }
  table {
    width: 100%;
    margin-top: 30px;
    border-collapse: collapse;
  }
  th, td {
    padding: 12px 15px;
    border-bottom: 1px solid #ddd;
    text-align: left;
    font-size: 0.95rem;
  }
  th {
    background: #f0e5d8;
    color: #2c3e50;
  }
  .status-select {
    width: 100%;
    padding: 6px;
    border-radius: 6px;
    border: 1px solid #ccc;
    font-family: 'Georgia', serif;
  }
  .completed {
    background-color: #d0f0c0;
    text-decoration: line-through;
    color: #555;
  }
</style>
</head>
<body>
  <div class="container">
    <header>
      <img src="logo.png" alt="School Logo" id="schoolLogo" />
      <h1>St. Joseph’s Asharadhama ICSE School</h1>
    </header>

    <form id="homeworkForm">
      <label for="assignedDate">Date Assigned:</label>
      <input type="date" id="assignedDate" required />

      <label for="dueDate">Due Date:</label>
      <input type="date" id="dueDate" required />

      <label for="classGrade">Class/Grade:</label>
      <input type="text" id="classGrade" placeholder="e.g. 7A" required />

      <label for="subject">Subject:</label>
      <input type="text" id="subject" placeholder="e.g. Mathematics" required />

      <label for="description">Homework Description:</label>
      <textarea id="description" placeholder="Describe the homework" required></textarea>

      <label for="status">Status:</label>
      <select id="status" class="status-select" required>
        <option value="Pending">Pending</option>
        <option value="Completed">Completed</option>
      </select>

      <button type="submit">Add Homework</button>
    </form>

    <table id="homeworkTable" aria-label="Homework list">
      <thead>
        <tr>
          <th>Date Assigned</th>
          <th>Due Date</th>
          <th>Class/Grade</th>
          <th>Subject</th>
          <th>Description</th>
          <th>Status</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

<script>
  const form = document.getElementById('homeworkForm');
  const tbody = document.querySelector('#homeworkTable tbody');

  // Initialize assignedDate with today
  window.onload = () => {
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('assignedDate').value = today;
    loadHomework();
  };

  // Get stored homework list or empty array
  function getHomeworkList() {
    return JSON.parse(localStorage.getItem('homeworkList') || '[]');
  }

  // Save list to localStorage
  function saveHomeworkList(list) {
    localStorage.setItem('homeworkList', JSON.stringify(list));
  }

  // Render homework list in table
  function renderHomework() {
    const list = getHomeworkList();
    tbody.innerHTML = '';

    if (list.length === 0) {
      tbody.innerHTML = '<tr><td colspan="7" style="text-align:center; color:#888;">No homework assigned yet.</td></tr>';
      return;
    }

    list.forEach((hw, index) => {
      const tr = document.createElement('tr');

      // Mark completed rows with a class
      if (hw.status === 'Completed') {
        tr.classList.add('completed');
      }

      tr.innerHTML = `
        <td>${hw.assignedDate}</td>
        <td>${hw.dueDate}</td>
        <td>${hw.classGrade}</td>
        <td>${hw.subject}</td>
        <td>${hw.description}</td>
        <td>${hw.status}</td>
        <td>
          <button onclick="toggleStatus(${index})" style="margin-right:5px;">Toggle Status</button>
          <button onclick="deleteHomework(${index})" style="background:#e74c3c; color:#fff;">Delete</button>
        </td>
      `;

      tbody.appendChild(tr);
    });
  }

  // Toggle status between Pending and Completed
  function toggleStatus(index) {
    const list = getHomeworkList();
    if (list[index].status === 'Pending') {
      list[index].status = 'Completed';
    } else {
      list[index].status = 'Pending';
    }
    saveHomeworkList(list);
    renderHomework();
  }

  // Delete a homework entry
  function deleteHomework(index) {
    if (confirm('Are you sure you want to delete this homework?')) {
      const list = getHomeworkList();
      list.splice(index, 1);
      saveHomeworkList(list);
      renderHomework();
    }
  }

  // Add new homework on form submit
  form.addEventListener('submit', e => {
    e.preventDefault();

    const newHomework = {
      assignedDate: form.assignedDate.value,
      dueDate: form.dueDate.value,
      classGrade: form.classGrade.value.trim(),
      subject: form.subject.value.trim(),
      description: form.description.value.trim(),
      status: form.status.value
    };

    // Simple validation: Due date should not be before assigned date
    if (newHomework.dueDate < newHomework.assignedDate) {
      alert("Due date cannot be earlier than assigned date.");
      return;
    }

    const list = getHomeworkList();
    list.push(newHomework);
    saveHomeworkList(list);
    form.reset();

    // Reset assignedDate to today after submit
    const today = new Date().toISOString().split('T')[0];
    form.assignedDate.value = today;
    form.status.value = 'Pending';

    renderHomework();
  });

  // Load and render homework on page load
  function loadHomework() {
    renderHomework();
  }
</script>
</body>
</html>